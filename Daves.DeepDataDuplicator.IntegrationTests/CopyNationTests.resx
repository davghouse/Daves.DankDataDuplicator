<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="checksum.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="CopyNation_UsingDefaultProcedure_TestAction.SqlScript" xml:space="preserve">
    <value>BEGIN TRAN;

DECLARE @maxNationID INT = (SELECT MAX(ID) FROM Nations);
DECLARE @maxProvinceID INT = (SELECT MAX(ID) FROM Provinces);
DECLARE @maxResidentID INT = (SELECT MAX(ID) FROM Residents);

DECLARE @RC INT;
DECLARE @id INT = 1;

EXECUTE @RC = [dbo].[CopyNation] @id;

-- Checksum all the original data, as it should be exactly the same.
SELECT *
FROM Nations
WHERE ID &lt;= @maxNationID
ORDER BY ID ASC;


SELECT *
FROM Provinces
WHERE ID &lt;= @maxProvinceID
ORDER BY ID ASC;

SELECT *
FROM Residents
WHERE ID &lt;= @maxResidentID
ORDER BY ID ASC;

-- Data created by the copy is harder, because the IDs aren't guaranteed to be the same.
-- Not an issue with identity columns incrementing, just the unguaranteed order of row copies.

-- Checking Nations.
SELECT
    Name NationName,
    FoundedDate NationFoundedDate
FROM Nations
WHERE ID &gt; @maxNationID;

-- Checking Provinces, ignoring non-dependent references.
SELECT
    Name ProvinceName,
    Motto ProvinceMotto
FROM Provinces
WHERE NationID &gt; @maxNationID
ORDER BY Name ASC;

-- Checking Provinces' leader resident reference.
SELECT
    p.Name ProvinceName,
    r.Name LeaderResidentName,
    CASE WHEN r.ID &gt; @maxResidentID THEN 1 ELSE 0 END ReferencesNewLeaderResident
FROM Provinces p
LEFT JOIN Residents r
    ON p.LeaderResidentID = r.ID
WHERE p.NationID &gt; @maxNationID
ORDER BY p.Name ASC;

-- Checking Residents, ignoring non-dependent references.
SELECT
    r.Name ResidentName,
    p.Name ProvinceName,
    n.Name NationName,
    CASE WHEN p.ID &gt; @maxProvinceID THEN 1 ELSE 0 END ReferencesNewProvince,
    CASE WHEN n.ID &gt; @maxNationID THEN 1 ELSE 0 END ReferencesNewNationality
FROM Residents r
JOIN Provinces p
    ON r.ProvinceID = p.ID
JOIN Nations n
    ON r.NationalityNationID = n.ID
WHERE r.ProvinceID &gt; @maxProvinceID
    OR r.NationalityNationID &gt; @maxNationID
ORDER BY r.Name ASC;

-- Checking Residents' spouse reference.
SELECT
    r.Name ResidentName,
    sr.Name SpouseResidentName,
    CASE WHEN sr.ID &gt; @maxResidentID THEN 1 ELSE 0 END ReferencesNewSpouse
FROM Residents r
LEFT JOIN Residents sr
    ON r.SpouseResidentID = sr.ID
WHERE r.ProvinceID &gt; @maxProvinceID
    OR r.NationalityNationID &gt; @maxNationID
ORDER BY r.Name ASC;

-- Checking Residents' favorite province reference.
SELECT
    r.Name ResidentName,
    p.Name FavoriteProvinceName,
    CASE WHEN p.ID &gt; @maxProvinceID THEN 1 ELSE 0 END ReferencesNewFavoriteProvince
FROM Residents r
LEFT JOIN Provinces p
    ON r.FavoriteProvinceID = p.ID
WHERE r.ProvinceID &gt; @maxProvinceID
    OR r.NationalityNationID &gt; @maxNationID
ORDER BY r.Name ASC;

ROLLBACK TRAN;
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>